name: Deploy Mautic

on:
  push:
    branches:
      - main  # deploy when pushing to main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}   # or use password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          script: |
            set -e

            echo "✅ Starting deployment..."

            # Navigate to deployment directory
            mkdir -p /var/www && cd /var/www

            # Start Docker containers
            docker-compose build
            docker-compose up -d db mautic_web

            # Get DB container ID
            DB=$(docker-compose ps -q db)
            if [ -z "$DB" ]; then
              echo "❌ DB container not found!"
              exit 1
            fi

            # Wait for DB readiness
            MAX_DB_RETRIES=30
            DB_RETRY=0
            until docker exec "$DB" pg_isready -U postgres >/dev/null 2>&1 || [ $DB_RETRY -ge $MAX_DB_RETRIES ]; do
              echo "Waiting for DB ($((DB_RETRY+1))/$MAX_DB_RETRIES)..."
              sleep 2
              DB_RETRY=$((DB_RETRY+1))
            done

            if [ $DB_RETRY -ge $MAX_DB_RETRIES ]; then
              echo "❌ DB not ready after $MAX_DB_RETRIES attempts."
              exit 1
            fi
            echo "✅ DB is ready!"

            # Get Web container ID
            WEB=$(docker-compose ps -q mautic_web)
            if [ -z "$WEB" ]; then
              echo "❌ Mautic Web container not found!"
              exit 1
            fi

            # Wait for Web container
            MAX_WEB_RETRIES=30
            WEB_RETRY=0
            until docker exec "$WEB" sh -c 'echo Running' >/dev/null 2>&1 || [ $WEB_RETRY -ge $MAX_WEB_RETRIES ]; do
              echo "Waiting for Mautic Web ($((WEB_RETRY+1))/$MAX_WEB_RETRIES)..."
              sleep 2
              WEB_RETRY=$((WEB_RETRY+1))
            done

            if [ $WEB_RETRY -ge $MAX_WEB_RETRIES ]; then
              echo "❌ Mautic Web not ready after $MAX_WEB_RETRIES attempts."
              exit 1
            fi
            echo "✅ Mautic Web is ready!"

            # Mautic install
            MAX_INSTALL_RETRIES=5
            INSTALL_RETRY=0
            SUCCESS=0
            while [ $INSTALL_RETRY -lt $MAX_INSTALL_RETRIES ]; do
              echo "Attempt $((INSTALL_RETRY+1)) to install Mautic..."
              if docker-compose exec -T -u www-data -w /var/www/html "$WEB" php ./bin/console mautic:install --force --admin_email "$EMAIL_ADDRESS" --admin_password "$MAUTIC_PASSWORD" http://$IP:$MAUTIC_PORT; then
                SUCCESS=1
                break
              else
                echo "Install failed, retrying in 10s..."
                sleep 10
                INSTALL_RETRY=$((INSTALL_RETRY+1))
              fi
            done

            if [ $SUCCESS -eq 0 ]; then
              echo "❌ Mautic installation failed after $MAX_INSTALL_RETRIES attempts."
              exit 1
            fi
            echo "✅ Mautic installed successfully!"

            # Nginx configuration
            ln -sf /var/www/nginx-virtual-host-$DOMAIN /etc/nginx/sites-enabled/
            nginx -t && (systemctl start nginx || nginx -s reload)

            # Let's Encrypt certificate
            certbot --nginx -d $DOMAIN --non-interactive --agree-tos -m $EMAIL_ADDRESS

            # Cron job for renewal
            (crontab -l 2>/dev/null; echo "0 0 1 * * certbot renew --post-hook 'systemctl reload nginx'") | crontab -

            echo "✅ Deployment complete!"
